
# Catatan Teknis dan Analisis Fitur Resep

Dokumen ini berisi analisis mendalam mengenai fungsionalitas "Resep" dalam aplikasi, mencakup desain database, logika frontend, dan rekomendasi perbaikan.

## 1. Analisis Konsep dan Logika Bisnis

Tujuan dari fitur "Resep" adalah untuk mendefinisikan komposisi dari sebuah `produk_jadi`. Sebuah `produk_jadi` (misal: "Parfum Lavender 50ml") terdiri dari beberapa `bahan_baku` (misal: 10ml Bibit Lavender, 40ml Alkohol, 1 buah Botol 50ml) dengan kuantitas masing-masing.

Ini adalah hubungan **many-to-many**:
- Satu `produk_jadi` memiliki **banyak** `bahan_baku`.
- Satu `bahan_baku` bisa digunakan di **banyak** `produk_jadi`.

## 2. Analisis Skema Database (`db.sql`)

### 2.1. Struktur Tabel `resep`

```sql
CREATE TABLE public.resep (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    produk_jadi_id uuid NOT NULL,
    bahan_baku_id uuid NOT NULL,
    jumlah_dibutuhkan numeric NOT NULL,
    user_id uuid
);
```

Struktur ini **secara teknis sudah benar** untuk merepresentasikan hubungan many-to-many. Setiap baris di tabel `resep` secara efektif adalah "item resep" yang menghubungkan satu produk jadi dengan satu bahan baku beserta jumlahnya. Ini adalah implementasi yang valid dari *junction table* atau tabel penghubung.

### 2.2. Kendala (Constraint)

```sql
ALTER TABLE ONLY public.resep
    ADD CONSTRAINT resep_produk_jadi_id_bahan_baku_id_key UNIQUE (produk_jadi_id, bahan_baku_id);
```

Constraint `UNIQUE` pada `(produk_jadi_id, bahan_baku_id)` ini sangat penting dan sudah diimplementasikan dengan benar. Ini mencegah duplikasi bahan baku dalam satu resep untuk produk yang sama. Misalnya, produk "Parfum X" tidak bisa memiliki dua entri untuk "Alkohol".

### 2.3. Kesimpulan Analisis Database

Skema database untuk fitur resep **sudah logis dan memadai**. Tidak ada kesalahan logika fundamental yang ditemukan pada level `db.sql`. Masalahnya tidak terletak di sini, melainkan pada bagaimana frontend berinteraksi dengan skema ini.

## 3. Analisis Kode Frontend

### 3.1. Halaman Daftar Resep (`/dashboard/resep/page.tsx`)

- **Logika Tampilan:** Halaman ini menampilkan setiap baris dari tabel `resep` sebagai entri terpisah.
- **Masalah Logika:** Ini adalah **kesalahan interpretasi data yang fundamental**. Pengguna tidak melihat "resep" sebagai satu kesatuan. Sebaliknya, mereka melihat daftar panjang dari setiap *komponen* resep. Jika satu produk "Parfum X" memiliki 5 bahan baku, maka di tabel ini akan muncul 5 baris terpisah untuk "Parfum X". Ini membingungkan dan tidak intuitif.
- **Contoh:** Jika ada resep:
    - Parfum A: butuh Alkohol (10ml), Bibit (5ml)
    - Parfum B: butuh Alkohol (15ml), Bibit (7ml)
- **Tampilan Saat Ini:** Akan menampilkan 4 baris:
    1. Parfum A - Alkohol - 10ml
    2. Parfum A - Bibit - 5ml
    3. Parfum B - Alkohol - 15ml
    4. Parfum B - Bibit - 7ml
- **Tampilan Seharusnya:** Menampilkan 2 baris, dikelompokkan berdasarkan produk:
    1. Parfum A (2 bahan)
    2. Parfum B (2 bahan)

### 3.2. Halaman Tambah Resep (`/dashboard/resep/add/page.tsx`)

- **Logika Form:** Form ini sudah dirancang dengan baik. Pengguna memilih satu `produk_jadi` dan kemudian bisa menambahkan beberapa baris `bahan_baku` secara dinamis.
- **Implementasi Submit:** Logika `handleSubmit` secara benar membuat array dari `resepData` dan mengirimkannya ke Supabase untuk di-`insert`.
- **Pengecekan Duplikat:** Kode ini dengan cerdas memeriksa apakah resep untuk `produk_jadi_id` sudah ada dan mengarahkan pengguna untuk mengedit jika ada. Ini adalah alur kerja yang bagus.
- **Kesimpulan:** Halaman tambah resep **sudah diimplementasikan dengan benar** dan sesuai dengan desain database.

### 3.3. Halaman Detail Resep (`/dashboard/resep/detail/[id]/page.tsx`)

- **Logika Pengambilan Data:** Halaman ini mengambil semua baris dari tabel `resep` yang cocok dengan `produk_jadi_id` dari URL.
- **Logika Tampilan:** Halaman ini kemudian mengagregasi data tersebut dan menampilkannya sebagai satu resep utuh, dengan daftar komposisi bahan bakunya.
- **Kesimpulan:** Halaman detail **sudah benar**. Ini menunjukkan bagaimana data seharusnya dilihat: satu produk dengan banyak bahan.

### 3.4. Komponen Form (`/components/forms/resep-form.tsx`)

- **Analisis:** File ini tampaknya merupakan sisa dari implementasi awal atau komponen yang tidak terpakai. Logikanya sangat sederhana, hanya mengizinkan input satu produk, satu bahan baku, dan satu jumlah. Ini **tidak sesuai** dengan kebutuhan resep yang kompleks.
- **Status:** Komponen ini **tidak digunakan** di halaman `/dashboard/resep/add/page.tsx`. Halaman tersebut memiliki logika form-nya sendiri yang lebih canggih. Komponen ini bisa diabaikan atau dihapus.

## 4. Ringkasan Masalah dan Rekomendasi

### Masalah Utama

Satu-satunya masalah logika yang signifikan ada di halaman daftar resep (`/dashboard/resep/page.tsx`). Halaman ini gagal mengelompokkan (grouping) item resep berdasarkan produk jadi, sehingga UI-nya tidak mencerminkan konsep "resep" yang sebenarnya. Aksi "Edit", "Detail", dan "Hapus" pada setiap baris juga menjadi ambigu. Menghapus satu baris berarti hanya menghapus satu bahan dari resep, bukan seluruh resep.

### Rekomendasi Perbaikan

**Target File:** `src/app/dashboard/resep/page.tsx`

1.  **Ubah Logika Pengambilan dan Agregasi Data:**
    - Daripada mengambil data mentah dari tabel `resep`, buatlah query atau fungsi RPC di Supabase/PostgreSQL yang mengelompokkan data berdasarkan `produk_jadi_id`.
    - **Contoh Fungsi SQL (untuk dibuat di Supabase):**
      ```sql
      CREATE OR REPLACE FUNCTION get_resep_summary()
      RETURNS TABLE(
          produk_jadi_id uuid,
          nama_produk_jadi text,
          harga_jual numeric,
          jumlah_bahan_baku bigint,
          bahan_baku_list jsonb
      )
      LANGUAGE sql
      AS $$
        SELECT
            pj.id as produk_jadi_id,
            pj.nama_produk_jadi,
            pj.harga_jual,
            count(r.bahan_baku_id) as jumlah_bahan_baku,
            jsonb_agg(jsonb_build_object(
                'nama', bb.nama_bahan_baku,
                'jumlah', r.jumlah_dibutuhkan,
                'unit', bb.unit
            )) as bahan_baku_list
        FROM
            public.produk_jadi pj
        JOIN
            public.resep r ON pj.id = r.produk_jadi_id
        JOIN
            public.bahan_baku bb ON r.bahan_baku_id = bb.id
        GROUP BY
            pj.id;
      $$;
      ```
    - Panggil fungsi ini dari frontend: `supabase.rpc('get_resep_summary')`.

2.  **Ubah Tampilan Tabel (Data Table):**
    - **Kolom "Produk":** Tampilkan `nama_produk_jadi`.
    - **Kolom "Jumlah Bahan":** Tampilkan `jumlah_bahan_baku` dari data agregat.
    - **Kolom "Komposisi" (Opsional):** Tampilkan ringkasan singkat dari `bahan_baku_list`, misalnya dengan tooltip atau badge.
    - **Kolom "Aksi":** Aksi `Detail`, `Edit`, dan `Hapus` sekarang harus beroperasi pada `produk_jadi_id`, bukan `id` baris resep tunggal.
        - **Detail:** `router.push('/dashboard/resep/detail/{produk_jadi_id}')` (Sudah benar).
        - **Edit:** `router.push('/dashboard/resep/edit/{produk_jadi_id}')` (Sudah benar).
        - **Hapus:** Fungsi `handleDelete` harus menghapus **semua** entri resep yang terkait dengan `produk_jadi_id`.
          ```typescript
          const handleDelete = async (produkId: string) => {
            // ... konfirmasi
            const { error } = await supabase
              .from('resep')
              .delete()
              .eq('produk_jadi_id', produkId);
            // ... handle error & success
          };
          ```

Dengan menerapkan perubahan ini, alur kerja fitur resep akan menjadi jauh lebih logis, konsisten, dan mudah digunakan, sesuai dengan ekspektasi pengguna.
